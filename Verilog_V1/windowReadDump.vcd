$date
	Sat May 11 17:54:01 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module windowReadTB $end
$var wire 16 ! mem_idata [15:0] $end
$var wire 2 " rw [1:0] $end
$var wire 16 # mem_odata [15:0] $end
$var wire 1 $ mem_drdy $end
$var wire 8 % mem_addr [7:0] $end
$var wire 16 & filter_out [15:0] $end
$var wire 1 ' filt_rdy $end
$var reg 1 ( clk $end
$var reg 1 ) filt_en $end
$var reg 1 * rst $end
$var reg 8 + sCOL [7:0] $end
$var reg 8 , sROW [7:0] $end
$scope module filter $end
$var wire 1 ( Filter_CLK $end
$var wire 1 ) Filter_EN $end
$var wire 1 * Filter_RST $end
$var wire 8 - Filter_sCOL [7:0] $end
$var wire 8 . Filter_sROW [7:0] $end
$var wire 1 $ Filter_MEMDRDY $end
$var wire 16 / Filter_MEMDR [15:0] $end
$var reg 1 ' Filter_FILTDRDY $end
$var reg 8 0 Filter_MEMADDR [7:0] $end
$var reg 2 1 Filter_MEMREAD [1:0] $end
$var reg 16 2 Filter_OUT [15:0] $end
$var reg 16 3 Filter_SR [15:0] $end
$var integer 32 4 col [31:0] $end
$var integer 32 5 i [31:0] $end
$var integer 32 6 row [31:0] $end
$var integer 32 7 wind_indx [31:0] $end
$scope function sortWindow $end
$var reg 16 8 temp [15:0] $end
$var integer 32 9 j [31:0] $end
$var integer 32 : k [31:0] $end
$var integer 32 ; mxm [31:0] $end
$upscope $end
$upscope $end
$scope module memory $end
$var wire 8 < Mem_ADDR [7:0] $end
$var wire 1 ( Mem_CLK $end
$var wire 16 = Mem_IDR [15:0] $end
$var wire 1 * Mem_RST $end
$var wire 2 > Mem_RW [1:0] $end
$var reg 1 $ Mem_DRDY $end
$var reg 16 ? Mem_ODR [15:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ?
bx >
bz =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
b11 .
b10 -
b11 ,
b10 +
0*
0)
0(
x'
bx &
bx %
0$
bx #
bx "
bz !
$end
#1000
1(
#2000
0(
#3000
1(
#4000
0(
1*
#5000
b0 #
b0 /
b0 ?
b0 "
b0 1
b0 >
b0 %
b0 0
b0 <
0'
b0 &
b0 2
b0 5
b0 4
b0 6
b0 7
1(
#6000
0(
0*
#7000
1(
#8000
0(
#9000
1$
b10001111011110 #
b10001111011110 /
b10001111011110 ?
b1xxxxxxxxxxxxxx 3
b10 "
b10 1
b10 >
b10111 %
b10111 0
b10111 <
b10 4
b11 6
1(
1)
#10000
b11000 %
b11000 0
b11000 <
b1 5
b11 4
0$
0(
#11000
1$
b1110111111111110 #
b1110111111111110 /
b1110111111111110 ?
1(
#12000
b11001 %
b11001 0
b11001 <
b10 5
b100 4
0$
0(
#13000
1$
b1001000100011 #
b1001000100011 /
b1001000100011 ?
1(
#14000
b11110 %
b11110 0
b11110 <
b11 5
b10 4
b100 6
0$
0(
#15000
1$
b101011011110011 #
b101011011110011 /
b101011011110011 ?
1(
#16000
b11111 %
b11111 0
b11111 <
b100 5
b11 4
0$
0(
#17000
1$
b1111111111100010 #
b1111111111100010 /
b1111111111100010 ?
1(
#18000
b100000 %
b100000 0
b100000 <
b101 5
b100 4
0$
0(
#19000
1$
b1111111010101101 #
b1111111010101101 /
b1111111010101101 ?
1(
#20000
b100101 %
b100101 0
b100101 <
b110 5
b10 4
b101 6
0$
0(
#21000
1$
b1100101111001101 #
b1100101111001101 /
b1100101111001101 ?
1(
#22000
b100110 %
b100110 0
b100110 <
b111 5
b11 4
0$
0(
#23000
1$
b1101110011011101 #
b1101110011011101 /
b1101110011011101 ?
1(
#24000
b100111 %
b100111 0
b100111 <
b1000 5
b100 4
0$
0(
#25000
1$
b1010110111101101 #
b1010110111101101 /
b1010110111101101 ?
1(
#26000
b0 "
b0 1
b0 >
b10xxxxxxxxxxxxxx 3
b0 5
0$
0(
#27000
1(
#28000
b0xxxxxxxxxxxxxx 3
1'
b1100101111001101 &
b1100101111001101 2
b1001000100011 8
b1 9
b1000 :
b0 ;
0(
#29000
1(
#30000
0'
0(
#31000
1(
#32000
0(
#33000
1(
#34000
0(
#35000
1(
#36000
0(
#37000
1(
#38000
0(
#39000
1(
#40000
0(
#41000
1(
#42000
0(
#43000
1(
#44000
0(
#45000
1(
#46000
0(
#47000
1(
#48000
0(
#49000
1(
#50000
0(
#51000
1(
#52000
0(
#53000
1(
#54000
0(
#55000
1(
#56000
0(
#57000
1(
#58000
0(
#59000
1(
